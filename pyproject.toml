[tool.poetry]
name = "fastmcp-threatintel"
version = "0.2.0"
description = "AI-Powered Threat Intelligence Analysis Tool with Multi-Source IOC Analysis, APT Attribution, and Interactive Reporting"
authors = ["Arjun Trivedi <arjun@example.com>"]
maintainers = ["Arjun Trivedi <arjun@example.com>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{ include = "threatintel", from = "src" }]
include = [
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "src/Demo.gif",
]
exclude = [
    "tests/",
    "docs/",
    "scripts/",
    ".github/",
    "*.log",
    "*.tmp",
]
homepage = "https://github.com/4R9UN/fastmcp-threatintel"
repository = "https://github.com/4R9UN/fastmcp-threatintel"
documentation = "https://4r9un.github.io/fastmcp-threatintel/"
keywords = [
    "threat-intelligence",
    "cybersecurity",
    "ioc",
    "mcp",
    "security",
    "malware-analysis",
    "apt-attribution",
    "virustotal",
    "otx",
    "abuseipdb",
    "stix",
    "threat-hunting"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Security",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking :: Monitoring",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Natural Language :: English",
    "Typing :: Typed",
]

[tool.poetry.scripts]
threatintel = "threatintel.cli:app"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
fastmcp = ">=0.1.0"
httpx = ">=0.28.1"
pydantic = ">=2.0.0"
pandas = ">=2.0.0"
networkx = ">=3.0"
python-dotenv = ">=1.1.0"
anyio = ">=4.6.0"
typer = {extras = ["all"], version = ">=0.12.5"}
tabulate = ">=0.9.0"
tqdm = ">=4.66.1"
rich = ">=13.0.0"
plotly = ">=5.0.0"
kaleido = ">=0.2.1"

[tool.poetry.group.dev.dependencies]
pytest = ">=8.3.3"
pytest-asyncio = ">=0.23.5"
pytest-cov = ">=4.1.0"
pre-commit = ">=3.0.0"
mypy = ">=1.5.1"
commitizen = ">=3.2.2"
black = ">=23.0.0"
isort = ">=5.12.0"
ruff = ">=0.1.0"
coverage = ">=7.0.0"
mkdocs = ">=1.5.0"
mkdocs-material = ">=9.0.0"
mkdocstrings = {extras = ["python"], version = ">=0.24.0"}

[tool.poetry.group.test.dependencies]
pytest-mock = ">=3.12.0"
pytest-xdist = ">=3.0.0"
faker = ">=20.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
version_files = [
    "pyproject.toml:version"
]
tag_format = "v$version"
update_changelog_on_bump = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
timeout = 30
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=threatintel",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
env = [
    "FASTMCP_TEST_MODE=1",
    "FASTMCP_LOG_LEVEL=DEBUG",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.per-file-ignores]
"tests/**/*" = ["B011"]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
