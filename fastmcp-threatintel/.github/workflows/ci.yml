name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v2

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: uv sync --dev

      - name: Run ruff (linting)
        run: uv run ruff check src/ tests/ --output-format=github

      - name: Run ruff (formatting)
        run: uv run ruff format --check src/ tests/

      - name: Run mypy (type checking)
        run: uv run mypy src/

      - name: Check imports with isort
        run: uv run isort --check-only src/ tests/

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v2

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: uv sync --dev

      - name: Run tests with coverage
        run: |
          uv run pytest tests/ \
            --cov=src/threatintel \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junit-xml=pytest-results.xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          verbose: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            coverage.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync --dev

      - name: Run bandit security linter
        run: uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run safety check
        run: uv run safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync --dev

      - name: Run integration tests
        run: uv run pytest tests/integration/ -v --tb=short
        env:
          # Use test API keys for integration tests
          VIRUSTOTAL_API_KEY: ${{ secrets.TEST_VIRUSTOTAL_API_KEY }}
          OTX_API_KEY: ${{ secrets.TEST_OTX_API_KEY }}

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Generate build report
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          for file in dist/*; do
            size=$(du -h "$file" | cut -f1)
            echo "| $(basename "$file") | $size |" >> $GITHUB_STEP_SUMMARY
          done

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            arjuntrivedi/fastmcp-threatintel
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: uv sync --dev

      - name: Build documentation
        run: uv run mkdocs build

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # PyPI Release Job
  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: 
      name: pypi
      url: https://pypi.org/p/fastmcp-threatintel
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Verify artifacts
        run: |
          ls -la dist/
          python -m pip install twine
          twine check dist/*

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Create PyPI badge
        run: |
          echo "## 📦 PyPI Release" >> $GITHUB_STEP_SUMMARY
          echo "Package successfully published to PyPI!" >> $GITHUB_STEP_SUMMARY
          echo "Install with: \`pip install fastmcp-threatintel\`" >> $GITHUB_STEP_SUMMARY

  # TestPyPI Release Job (for testing)
  testpypi-publish:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'rc')
    environment: 
      name: testpypi
      url: https://test.pypi.org/p/fastmcp-threatintel
    permissions:
      id-token: write
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true

  # GitHub Release Job
  github-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: [pypi-publish, docker-build]
    if: github.event_name == 'release'
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs-site/

      - name: Create release archive
        run: |
          tar -czf fastmcp-threatintel-docs-${{ github.ref_name }}.tar.gz -C docs-site .
          zip -r fastmcp-threatintel-docs-${{ github.ref_name }}.zip docs-site/

      - name: Update GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            fastmcp-threatintel-docs-*.tar.gz
            fastmcp-threatintel-docs-*.zip
          generate_release_notes: true
          append_body: |
            
            ## 📦 Installation
            
            ```bash
            # Install from PyPI
            pip install fastmcp-threatintel
            
            # Install with Docker
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            
            # Install from source
            curl -sSL https://github.com/${{ github.repository }}/archive/${{ github.ref_name }}.tar.gz | tar -xz
            ```
            
            ## 🔗 Links
            - 📚 [Documentation](https://4r9un.github.io/fastmcp-threatintel/)
            - 🐳 [Docker Hub](https://hub.docker.com/r/4r9un/fastmcp-threatintel)
            - 📦 [PyPI Package](https://pypi.org/project/fastmcp-threatintel/)

  # Notification Job
  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()
    steps:
      - name: Notify success
        if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ All CI checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting and code quality checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test suite across all platforms" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Package building" >> $GITHUB_STEP_SUMMARY

      - name: Notify failure
        if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Some CI checks failed!" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY